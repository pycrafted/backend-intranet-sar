#!/bin/bash
set -e

echo "üöÄ D√©marrage du backend Django SAR sur Render..."

# =============================================================================
# CONFIGURATION DE L'ENVIRONNEMENT
# =============================================================================

# Utiliser les settings Render
export DJANGO_SETTINGS_MODULE=master.settings_render

# Afficher les informations de configuration
echo "üìã Configuration:"
echo "   - Settings: $DJANGO_SETTINGS_MODULE"
echo "   - Debug: ${DEBUG:-False}"
echo "   - Port: ${PORT:-8000}"

# =============================================================================
# V√âRIFICATION DES D√âPENDANCES
# =============================================================================

echo "üîç V√©rification des d√©pendances..."
python -c "import django; print(f'Django {django.get_version()}')"
python -c "import psycopg2; print('PostgreSQL support OK')"
python -c "import gunicorn; print('Gunicorn OK')"

# =============================================================================
# MIGRATIONS DE BASE DE DONN√âES
# =============================================================================

echo "üîÑ Application des migrations Django..."
# Appliquer les migrations avec gestion des erreurs
python manage.py migrate --run-syncdb || {
    echo "‚ö†Ô∏è  Erreur lors des migrations, tentative de r√©cup√©ration..."
    python fix_migrations.py || echo "‚ö†Ô∏è  Impossible de corriger les migrations"
}

# =============================================================================
# COLLECTION DES FICHIERS STATIQUES
# =============================================================================

echo "üì¶ Collection des fichiers statiques..."
python manage.py collectstatic --noinput --clear

# =============================================================================
# CONFIGURATION DES DONN√âES INITIALES (SIMPLIFI√âE)
# =============================================================================

echo "üìä Configuration des donn√©es initiales..."

# Cr√©er un dataset minimal si n√©cessaire
if [ ! -f "data/sar_official_dataset.csv" ]; then
    echo "   - Cr√©ation d'un dataset minimal..."
    mkdir -p data
    echo "question,answer" > data/sar_official_dataset.csv
    echo "Qu'est-ce que la SAR ?,Soci√©t√© Africaine de Raffinage" >> data/sar_official_dataset.csv
    echo "Quelle est la date d'inauguration de la SAR ?,Le 27 janvier 1964" >> data/sar_official_dataset.csv
    echo "Quelle est la capacit√© de la SAR ?,1,2 million de tonnes par an" >> data/sar_official_dataset.csv
fi

# =============================================================================
# D√âPLOIEMENT DES FICHIERS M√âDIA
# =============================================================================

echo "üìÅ D√©ploiement des fichiers m√©dia..."
python deploy_media.py || echo "‚ö†Ô∏è  Erreur lors du d√©ploiement des m√©dias"

# V√©rifier que les m√©dias sont pr√©sents
echo "üîç V√©rification des m√©dias..."
ls -la media/ || echo "‚ö†Ô∏è  Dossier m√©dia non trouv√©"
ls -la media/articles/ || echo "‚ö†Ô∏è  Dossier articles non trouv√©"

# Corriger les noms de fichiers dans la base de donn√©es
echo "üîß Correction des noms de fichiers m√©dia..."
python fix_media_filenames.py || echo "‚ö†Ô∏è  Erreur lors de la correction des noms de fichiers"

# Configuration RAG compl√®te avec chargement du dataset
echo "   - Configuration RAG compl√®te..."
python manage.py shell -c "
from mai.models import DocumentEmbedding
from mai.services import MAIService
import pandas as pd
import os

# V√©rifier l'existence du dataset
dataset_path = 'data/sar_official_dataset.csv'
if not os.path.exists(dataset_path):
    print(f'ERREUR: Dataset non trouv√© √† {dataset_path}')
    exit(1)

# Charger le dataset complet
try:
    df = pd.read_csv(dataset_path)
    print(f'Dataset charg√©: {len(df)} questions')
    
    # V√©rifier que le dataset contient les bonnes donn√©es
    test_questions = [
        'Qui est l\\'actuel Directeur g√©n√©ral de la SAR ?',
        'O√π se trouve la SAR ?',
        'Quelle est la fonction du wharf op√©r√© par la SAR ?'
    ]
    
    for test_q in test_questions:
        found = False
        for _, row in df.iterrows():
            if test_q.lower() in row['question'].lower():
                print(f'‚úÖ Question trouv√©e: {test_q}')
                found = True
                break
        if not found:
            print(f'‚ùå Question manquante: {test_q}')
    
    # Cr√©er tous les documents (pas seulement les 5 premiers)
    print('Cr√©ation des documents en base...')
    created_count = 0
    for _, row in df.iterrows():
        doc, created = DocumentEmbedding.objects.get_or_create(
            content=f'Q: {row[\"question\"]}\\nA: {row[\"answer\"]}',
            defaults={
                'embedding': [0.0] * 384,  # Embedding factice
                'metadata': {
                    'question': row['question'],
                    'answer': row['answer'],
                    'source': 'sar_official_dataset.csv'
                }
            }
        )
        if created:
            created_count += 1
    
    print(f'Documents cr√©√©s: {created_count}')
    print(f'Total documents en base: {DocumentEmbedding.objects.count()}')
    print('Configuration RAG termin√©e avec succ√®s')
    
except Exception as e:
    print(f'ERREUR configuration RAG: {e}')
    import traceback
    traceback.print_exc()
" || echo "‚ö†Ô∏è  Erreur lors de la configuration RAG"

# =============================================================================
# CR√âATION DU SUPERUTILISATEUR
# =============================================================================

echo "üë§ V√©rification du superutilisateur..."
python manage.py shell -c "
from django.contrib.auth import get_user_model
User = get_user_model()
if not User.objects.filter(username='admin').exists():
    User.objects.create_superuser('admin', 'admin@sar.sn', 'admin123')
    print('‚úÖ Superutilisateur cr√©√©: admin/admin123')
else:
    print('‚úÖ Superutilisateur existe d√©j√†')
" || echo "‚ö†Ô∏è  Erreur lors de la cr√©ation du superutilisateur"

# =============================================================================
# V√âRIFICATION DE LA SANT√â DE L'APPLICATION
# =============================================================================

echo "üè• V√©rification de la sant√© de l'application..."
python manage.py check --deploy || echo "‚ö†Ô∏è  Avertissements de d√©ploiement d√©tect√©s"

# =============================================================================
# D√âMARRAGE DU SERVEUR
# =============================================================================

echo "‚úÖ Backend Django pr√™t!"
echo "üåê D√©marrage du serveur sur le port ${PORT:-8000}"

# D√©marrer Gunicorn avec la configuration optimis√©e pour Render
exec gunicorn master.wsgi:application \
    --bind 0.0.0.0:${PORT:-8000} \
    --workers ${WORKERS:-4} \
    --worker-class sync \
    --worker-connections 1000 \
    --max-requests 1000 \
    --max-requests-jitter 100 \
    --timeout 30 \
    --keep-alive 2 \
    --preload \
    --log-level info \
    --access-logfile - \
    --error-logfile -
