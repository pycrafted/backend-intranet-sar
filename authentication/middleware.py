"""
Middleware d'authentification personnalis√© pour v√©rifier les sessions Django
"""
from django.http import JsonResponse
from django.contrib.auth import get_user_model
from django.utils.deprecation import MiddlewareMixin

User = get_user_model()

class AuthenticationMiddleware(MiddlewareMixin):
    """
    Middleware pour v√©rifier l'authentification sur les routes prot√©g√©es
    """
    
    # Routes qui n√©cessitent une authentification
    PROTECTED_PATHS = [
        '/api/auth/current-user/',
        '/api/auth/check-auth/',
        '/api/auth/upload-avatar/',
        '/api/auth/change-password/',
    ]
    
    # Routes publiques (pas d'authentification requise)
    PUBLIC_PATHS = [
        '/api/auth/login/',
        '/api/auth/register/',
        '/api/auth/csrf/',
        '/api/auth/logout/',  # Logout n√©cessite une session valide
    ]
    
    def process_request(self, request):
        """
        V√©rifier l'authentification avant de traiter la requ√™te
        """
        # V√©rifier si la route n√©cessite une authentification
        if self._is_protected_path(request.path):
            # V√©rifier si l'utilisateur est authentifi√©
            if not request.user.is_authenticated:
                # Debug: afficher les informations de session
                print(f"üîç Middleware - Route: {request.path}")
                print(f"üîç Middleware - User: {request.user}")
                print(f"üîç Middleware - Authenticated: {request.user.is_authenticated}")
                print(f"üîç Middleware - Session: {request.session}")
                print(f"üîç Middleware - Cookies: {request.COOKIES}")
                
                return JsonResponse({
                    'error': 'Authentification requise',
                    'message': 'Vous devez √™tre connect√© pour acc√©der √† cette ressource'
                }, status=401)
        
        return None
    
    def _is_protected_path(self, path):
        """
        V√©rifier si le chemin n√©cessite une authentification
        """
        # V√©rifier les chemins prot√©g√©s
        for protected_path in self.PROTECTED_PATHS:
            if path.startswith(protected_path):
                return True
        
        # V√©rifier que ce n'est pas un chemin public
        for public_path in self.PUBLIC_PATHS:
            if path.startswith(public_path):
                return False
        
        # Par d√©faut, consid√©rer comme prot√©g√©
        return True
