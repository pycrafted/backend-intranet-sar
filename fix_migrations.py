#!/usr/bin/env python3
"""
Script de r√©cup√©ration des migrations pour Render
G√®re les conflits de tables existantes
"""

import os
import sys
import django
from django.db import connection
from django.core.management import execute_from_command_line

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'master.settings_render')
django.setup()

def check_table_exists(table_name):
    """V√©rifier si une table existe dans la base de donn√©es"""
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_name = %s
            );
        """, [table_name])
        return cursor.fetchone()[0]

def fix_migrations():
    """Corriger les migrations probl√©matiques"""
    print("üîß Correction des migrations...")
    
    # V√©rifier les tables existantes
    tables_to_check = [
        'rag_search_log',
        'rag_documentembedding',
        'django_migrations'
    ]
    
    existing_tables = {}
    for table in tables_to_check:
        exists = check_table_exists(table)
        existing_tables[table] = exists
        print(f"   Table {table}: {'‚úÖ Existe' if exists else '‚ùå N\'existe pas'}")
    
    # Si les tables principales existent, marquer les migrations comme appliqu√©es
    if existing_tables.get('rag_search_log') and existing_tables.get('rag_documentembedding'):
        print("‚úÖ Tables principales existent, marquage des migrations comme appliqu√©es...")
        try:
            # Marquer la migration 0001 comme appliqu√©e
            with connection.cursor() as cursor:
                cursor.execute("""
                    INSERT INTO django_migrations (app, name, applied)
                    VALUES ('mai', '0001_initial', NOW())
                    ON CONFLICT (app, name) DO NOTHING;
                """)
            print("   ‚úÖ Migration 0001 marqu√©e comme appliqu√©e")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Erreur lors du marquage: {e}")
    
    # Appliquer les migrations restantes
    print("üîÑ Application des migrations restantes...")
    try:
        execute_from_command_line(['manage.py', 'migrate', '--run-syncdb'])
        print("‚úÖ Migrations appliqu√©es avec succ√®s")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors des migrations: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = fix_migrations()
    sys.exit(0 if success else 1)
