"""
Vues personnalis√©es pour servir les fichiers m√©dia avec les bons headers CORS
"""
import os
import mimetypes
import logging
from django.http import HttpResponse, Http404
from django.conf import settings
from django.views.decorators.http import require_http_methods
from django.utils.decorators import method_decorator
from django.views import View

# Configuration du logger
logger = logging.getLogger(__name__)


class MediaView(View):
    """
    Vue pour servir les fichiers m√©dia avec les headers CORS appropri√©s
    """
    
    def get(self, request, path):
        # Log de d√©bogage d√©taill√©
        logger.info(f"üñºÔ∏è [MEDIA_VIEW] Requ√™te fichier m√©dia: {path}")
        logger.info(f"üñºÔ∏è [MEDIA_VIEW] Origin: {request.META.get('HTTP_ORIGIN', 'Unknown')}")
        logger.info(f"üñºÔ∏è [MEDIA_VIEW] User-Agent: {request.META.get('HTTP_USER_AGENT', 'Unknown')}")
        logger.info(f"üñºÔ∏è [MEDIA_VIEW] Host: {request.META.get('HTTP_HOST', 'Unknown')}")
        logger.info(f"üñºÔ∏è [MEDIA_VIEW] Referer: {request.META.get('HTTP_REFERER', 'Unknown')}")
        logger.info(f"üñºÔ∏è [MEDIA_VIEW] Request method: {request.method}")
        logger.info(f"üñºÔ∏è [MEDIA_VIEW] Request headers: {dict(request.META)}")
        
        # Construire le chemin complet vers le fichier
        file_path = os.path.join(settings.MEDIA_ROOT, path)
        logger.info(f"üñºÔ∏è [MEDIA_VIEW] Chemin fichier: {file_path}")
        logger.info(f"üñºÔ∏è [MEDIA_VIEW] MEDIA_ROOT: {settings.MEDIA_ROOT}")
        logger.info(f"üñºÔ∏è [MEDIA_VIEW] Chemin absolu: {os.path.abspath(file_path)}")
        
        # V√©rifier que le fichier existe
        if not os.path.exists(file_path):
            logger.error(f"‚ùå [MEDIA_VIEW] Fichier non trouv√©: {file_path}")
            logger.error(f"‚ùå [MEDIA_VIEW] Liste des fichiers dans MEDIA_ROOT: {os.listdir(settings.MEDIA_ROOT) if os.path.exists(settings.MEDIA_ROOT) else 'MEDIA_ROOT n\'existe pas'}")
            logger.error(f"‚ùå [MEDIA_VIEW] Liste des fichiers dans articles: {os.listdir(os.path.join(settings.MEDIA_ROOT, 'articles')) if os.path.exists(os.path.join(settings.MEDIA_ROOT, 'articles')) else 'Dossier articles n\'existe pas'}")
            raise Http404("Fichier non trouv√©")
        
        # V√©rifier que le chemin est s√©curis√© (pas de ..)
        if not os.path.abspath(file_path).startswith(settings.MEDIA_ROOT):
            raise Http404("Chemin non autoris√©")
        
        # D√©terminer le type MIME
        content_type, _ = mimetypes.guess_type(file_path)
        if content_type is None:
            content_type = 'application/octet-stream'
        
        # Lire le fichier
        try:
            with open(file_path, 'rb') as f:
                content = f.read()
            logger.info(f"‚úÖ [MEDIA_VIEW] Fichier lu avec succ√®s: {len(content)} bytes")
        except IOError as e:
            logger.error(f"‚ùå [MEDIA_VIEW] Erreur de lecture du fichier: {e}")
            raise Http404("Erreur de lecture du fichier")
        
        # Cr√©er la r√©ponse avec les headers CORS
        response = HttpResponse(content, content_type=content_type)
        logger.info(f"üì§ [MEDIA_VIEW] R√©ponse cr√©√©e avec content-type: {content_type}")
        
        # Headers CORS pour permettre l'acc√®s depuis Vercel
        origin = request.META.get('HTTP_ORIGIN', '')
        logger.info(f"üåê [MEDIA_VIEW] Origin re√ßu: {origin}")
        
        # Accepter toutes les origines Vercel et localhost
        if origin and (
            origin.endswith('.vercel.app') or 
            origin.startswith('https://frontend-intranet') or
            origin in ['http://localhost:3000', 'https://localhost:3000', 'http://127.0.0.1:3000']
        ):
            response['Access-Control-Allow-Origin'] = origin
            logger.info(f"‚úÖ [MEDIA_VIEW] CORS autoris√© pour: {origin}")
        else:
            response['Access-Control-Allow-Origin'] = '*'
            logger.info(f"üåç [MEDIA_VIEW] CORS ouvert pour tous: {origin}")
            
        response['Access-Control-Allow-Methods'] = 'GET, OPTIONS, HEAD'
        response['Access-Control-Allow-Headers'] = 'Content-Type, Authorization, X-Requested-With, Accept, Origin, Cache-Control, Pragma'
        response['Access-Control-Allow-Credentials'] = 'false'  # Pas de cookies pour les images
        response['Access-Control-Max-Age'] = '86400'  # 24 heures
        response['Access-Control-Expose-Headers'] = 'Content-Length, Content-Type, Cache-Control, ETag'
        
        # Headers de cache pour optimiser les performances
        response['Cache-Control'] = 'public, max-age=31536000'  # 1 an
        response['ETag'] = f'"{os.path.getmtime(file_path)}"'
        
        return response
    
    def options(self, request, path):
        """G√©rer les requ√™tes OPTIONS pour CORS"""
        logger.info(f"üîÑ [MEDIA_VIEW] Requ√™te OPTIONS pour: {path}")
        logger.info(f"üîÑ [MEDIA_VIEW] Origin: {request.META.get('HTTP_ORIGIN', 'Unknown')}")
        
        response = HttpResponse()
        origin = request.META.get('HTTP_ORIGIN', '')
        
        # Accepter toutes les origines Vercel et localhost
        if origin and (
            origin.endswith('.vercel.app') or 
            origin.startswith('https://frontend-intranet') or
            origin in ['http://localhost:3000', 'https://localhost:3000', 'http://127.0.0.1:3000']
        ):
            response['Access-Control-Allow-Origin'] = origin
            logger.info(f"‚úÖ [MEDIA_VIEW] CORS OPTIONS autoris√© pour: {origin}")
        else:
            response['Access-Control-Allow-Origin'] = '*'
            logger.info(f"üåç [MEDIA_VIEW] CORS OPTIONS ouvert pour tous: {origin}")
            
        response['Access-Control-Allow-Methods'] = 'GET, OPTIONS, HEAD'
        response['Access-Control-Allow-Headers'] = 'Content-Type, Authorization, X-Requested-With, Accept, Origin, Cache-Control, Pragma'
        response['Access-Control-Allow-Credentials'] = 'false'
        response['Access-Control-Max-Age'] = '86400'
        response['Access-Control-Expose-Headers'] = 'Content-Length, Content-Type, Cache-Control, ETag'
        return response
