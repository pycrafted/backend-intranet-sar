#!/usr/bin/env python
"""
D√©ploiement minimal pour Render.
√âvite tous les probl√®mes de configuration complexe.
"""
import os
import sys
import subprocess
from pathlib import Path

def run_command(command, description=""):
    """Ex√©cute une commande et affiche le r√©sultat"""
    print(f"Ex√©cution: {description or command}")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, check=True)
        if result.stdout:
            print(f"STDOUT: {result.stdout.strip()}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"ERREUR: {e}")
        if e.stderr:
            print(f"STDERR: {e.stderr.strip()}")
        return False

def deploy_render_minimal():
    """D√©ploiement minimal pour Render"""
    print("üöÄ D√âPLOIEMENT MINIMAL RENDER")
    print("=" * 40)
    
    # √âtape 1: Configuration de l'environnement
    print("\n--- Configuration Environnement ---")
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'master.settings_render')
    
    # √âtape 2: Test de la configuration
    print("\n--- Test Configuration ---")
    if not run_command("python test_render_config.py", "Test configuration Render"):
        print("‚ùå Configuration invalide")
        return False
    
    # √âtape 3: Migrations
    print("\n--- Migrations ---")
    if not run_command("python manage.py makemigrations", "Cr√©ation migrations"):
        print("‚ö†Ô∏è Erreur migrations, continuation...")
    
    if not run_command("python manage.py migrate --run-syncdb", "Application migrations"):
        print("‚ùå √âchec migrations")
        return False
    
    # √âtape 4: Fichiers statiques
    print("\n--- Fichiers Statiques ---")
    if not run_command("python manage.py collectstatic --noinput --clear", "Collecte fichiers statiques"):
        print("‚ùå √âchec collecte fichiers statiques")
        return False
    
    # √âtape 5: V√©rification finale
    print("\n--- V√©rification Finale ---")
    if not run_command("python manage.py check --deploy", "V√©rification d√©ploiement"):
        print("‚ö†Ô∏è Avertissements de d√©ploiement d√©tect√©s")
    
    print("\n‚úÖ D√âPLOIEMENT MINIMAL R√âUSSI !")
    return True

if __name__ == "__main__":
    success = deploy_render_minimal()
    sys.exit(0 if success else 1)

