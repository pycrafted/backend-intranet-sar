#!/usr/bin/env python
"""
Script de pr√©-v√©rification des migrations:
- V√©rifie s'il y a des changements de mod√®les non migr√©s (makemigrations --check)
- Affiche le plan de migration sans appliquer (migrate --plan)

Usage:
  python backend-intranet-sar/check_migrations_plan.py
"""
import os
import sys


def main():
    project_root = os.path.dirname(os.path.abspath(__file__))
    sys.path.append(project_root)
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "master.settings")

    import django
    django.setup()

    from django.core import management

    print("=" * 80)
    print("üîé √âtape 1/2: V√©rification de l'√©tat des migrations (makemigrations --check)")
    print("=" * 80)
    try:
        # --check: renvoie un code d'erreur s'il y a des changements non migr√©s
        management.call_command("makemigrations", "--check", verbosity=1)
        print("‚úÖ Aucun changement de mod√®le non migr√© d√©tect√©.")
    except SystemExit as e:
        # Django l√®ve SystemExit avec code != 0 en cas de changements
        print("‚ö†Ô∏è  Des changements de mod√®les non migr√©s ont √©t√© d√©tect√©s.")
        print("   ‚Üí Lancez: python manage.py makemigrations")
        # On continue quand m√™me pour afficher le plan potentiel

    print("\n" + "=" * 80)
    print("üß≠ √âtape 2/2: Plan de migration (migrate --plan)")
    print("=" * 80)
    try:
        management.call_command("migrate", "--plan", verbosity=1)
        print("\n‚úÖ Affichage du plan termin√©. Aucune migration n'a √©t√© appliqu√©e.")
    except Exception as e:
        print("‚úó Erreur lors de l'affichage du plan de migration:", e)
        sys.exit(1)

    print("\nVous pouvez maintenant appliquer en toute s√©curit√© avec:\n  python manage.py migrate")


if __name__ == "__main__":
    main()


