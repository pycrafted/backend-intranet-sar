#!/usr/bin/env python
"""
Script de diagnostic pour le syst√®me MAI.
Teste le chargement du dataset, le filtrage SAR et la recherche.
"""
import os
import sys
import django
from pathlib import Path

# Configuration Django
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'master.settings')
django.setup()

from mai.services import MAIService

def test_dataset_loading():
    """Teste le chargement du dataset"""
    print("=== TEST CHARGEMENT DATASET ===")
    service = MAIService()
    print(f"Nombre de questions charg√©es: {service.get_question_count()}")
    
    if service.get_question_count() == 0:
        print("‚ùå ERREUR: Aucune question charg√©e!")
        return False
    
    print("‚úÖ Dataset charg√© avec succ√®s")
    return True

def test_sar_filtering():
    """Teste le filtrage SAR"""
    print("\n=== TEST FILTRAGE SAR ===")
    service = MAIService()
    
    test_questions = [
        "L'objet d'incertitude est l'√©l√©ment, la situation ou l'√©v√©nement qui pr√©sente un risque ou une opportunit√© pour l'organisation.",
        "acc√©der au bilan des risques dans QUALIPRO",
        "Comment est calcul√© le score d'un risque ?",
        "Quelles informations trouve-t-on dans l'agenda d'un utilisateur ?",
        "Qu'est-ce que la SAR ?",
        "Comment fonctionne QUALIPRO ?"
    ]
    
    for question in test_questions:
        is_sar = service.is_question_about_sar(question)
        print(f"Question: '{question[:50]}...'")
        print(f"SAR: {is_sar}")
        print("-" * 50)

def test_similarity_search():
    """Teste la recherche de similarit√©"""
    print("\n=== TEST RECHERCHE SIMILARIT√â ===")
    service = MAIService()
    
    test_questions = [
        "L'objet d'incertitude est l'√©l√©ment, la situation ou l'√©v√©nement qui pr√©sente un risque ou une opportunit√© pour l'organisation.",
        "acc√©der au bilan des risques dans QUALIPRO",
        "Comment est calcul√© le score d'un risque ?",
        "Quelles informations trouve-t-on dans l'agenda d'un utilisateur ?"
    ]
    
    for question in test_questions:
        print(f"\nQuestion: '{question}'")
        
        # Test avec diff√©rents seuils
        for threshold in [0.1, 0.2, 0.3, 0.4, 0.5]:
            result = service.search_answer(question, threshold=threshold)
            if result:
                print(f"  Seuil {threshold}: TROUV√â - Similarit√©: {result['similarity']:.3f}")
                print(f"  R√©ponse: {result['answer'][:100]}...")
                break
            else:
                print(f"  Seuil {threshold}: Non trouv√©")
        else:
            print("  ‚ùå Aucune correspondance trouv√©e m√™me avec seuil 0.1")

def test_exact_matches():
    """Teste les correspondances exactes du dataset"""
    print("\n=== TEST CORRESPONDANCES EXACTES ===")
    service = MAIService()
    
    exact_questions = [
        "Que signifie l'expression 'objet d'incertitude' ?",
        "Comment peut-on acc√©der au bilan des risques dans QUALIPRO ?",
        "Comment est calcul√© le score d'un risque ?",
        "Quelles informations trouve-t-on dans l'agenda d'un utilisateur ?"
    ]
    
    for question in exact_questions:
        print(f"\nQuestion exacte: '{question}'")
        result = service.search_answer(question, threshold=0.1)
        if result:
            print(f"‚úÖ TROUV√â - Similarit√©: {result['similarity']:.3f}")
            print(f"R√©ponse: {result['answer']}")
        else:
            print("‚ùå NON TROUV√â")

def test_normalization():
    """Teste la normalisation du texte"""
    print("\n=== TEST NORMALISATION ===")
    service = MAIService()
    
    test_texts = [
        "L'objet d'incertitude est l'√©l√©ment, la situation ou l'√©v√©nement qui pr√©sente un risque ou une opportunit√© pour l'organisation.",
        "acc√©der au bilan des risques dans QUALIPRO",
        "Comment est calcul√© le score d'un risque ?",
        "Quelles informations trouve-t-on dans l'agenda d'un utilisateur ?"
    ]
    
    for text in test_texts:
        normalized = service._normalize_text(text)
        print(f"Original: {text[:50]}...")
        print(f"Normalis√©: {normalized[:50]}...")
        print("-" * 50)

def main():
    """Fonction principale de diagnostic"""
    print("üîç DIAGNOSTIC SYST√àME MAI")
    print("=" * 50)
    
    # Test 1: Chargement du dataset
    if not test_dataset_loading():
        print("‚ùå √âCHEC: Dataset non charg√©")
        return
    
    # Test 2: Filtrage SAR
    test_sar_filtering()
    
    # Test 3: Normalisation
    test_normalization()
    
    # Test 4: Correspondances exactes
    test_exact_matches()
    
    # Test 5: Recherche de similarit√©
    test_similarity_search()
    
    print("\nüéØ DIAGNOSTIC TERMIN√â")

if __name__ == "__main__":
    main()
