# =============================================================================
# CONFIGURATION RENDER - Backend SAR
# =============================================================================
# Fichier de configuration pour le d√©ploiement automatique sur Render

services:
  # Service Backend Django
  - type: web
    name: sar-backend
    env: python
    plan: free  # Commencer avec le plan gratuit
    buildCommand: |
      echo "üî® Installation des d√©pendances..."
      pip install -r requirements_render.txt
      echo "‚úÖ D√©pendances install√©es"
    startCommand: |
      chmod +x entrypoint_render.sh
      ./entrypoint_render.sh
    healthCheckPath: /api/health/
    envVars:
      # Configuration Django
      - key: DJANGO_SETTINGS_MODULE
        value: master.settings_production
      - key: DEBUG
        value: False
      - key: SECRET_KEY
        generateValue: true
      
      # Configuration de base de donn√©es (Render PostgreSQL)
      - key: POSTGRES_DB
        fromDatabase:
          name: sar-db
          property: database
      - key: POSTGRES_USER
        fromDatabase:
          name: sar-db
          property: user
      - key: POSTGRES_PASSWORD
        fromDatabase:
          name: sar-db
          property: password
      - key: POSTGRES_HOST
        fromDatabase:
          name: sar-db
          property: host
      - key: POSTGRES_PORT
        fromDatabase:
          name: sar-db
          property: port
      
      # Configuration CORS
      - key: FRONTEND_URL
        value: https://votre-frontend.onrender.com
      
      # Configuration OAuth Google
      - key: GOOGLE_OAUTH2_CLIENT_ID
        value: votre-client-id-google
      - key: GOOGLE_OAUTH2_CLIENT_SECRET
        value: votre-client-secret-google
      
      # Configuration Claude API
      - key: CLAUDE_API_KEY
        value: votre-claude-api-key
      
      # Configuration des workers
      - key: WORKERS
        value: 2

  # Base de donn√©es PostgreSQL
  - type: pserv
    name: sar-db
    env: postgresql
    plan: free  # Commencer avec le plan gratuit
    postgresMajorVersion: 15
    initCommands:
      - |
        -- Activer l'extension pgvector pour le RAG
        CREATE EXTENSION IF NOT EXISTS vector;
        
        -- Cr√©er un index pour les performances
        -- (sera cr√©√© automatiquement par Django)
        
        -- Configuration des param√®tres de performance
        ALTER SYSTEM SET shared_preload_libraries = 'vector';
        ALTER SYSTEM SET max_connections = 100;
        ALTER SYSTEM SET shared_buffers = '128MB';
        ALTER SYSTEM SET effective_cache_size = '256MB';
        ALTER SYSTEM SET maintenance_work_mem = '64MB';
        ALTER SYSTEM SET checkpoint_completion_target = 0.9;
        ALTER SYSTEM SET wal_buffers = '4MB';
        ALTER SYSTEM SET default_statistics_target = 100;
        
        -- Recharger la configuration
        SELECT pg_reload_conf();

# =============================================================================
# NOTES DE CONFIGURATION
# =============================================================================
# 
# 1. PLAN GRATUIT:
#    - Backend: 512MB RAM, 0.1 CPU
#    - Base de donn√©es: 1GB stockage, 0.1 CPU
#    - Limitations: Sleep apr√®s 15min d'inactivit√©
# 
# 2. VARIABLES D'ENVIRONNEMENT REQUISES:
#    - SECRET_KEY: G√©n√©r√©e automatiquement par Render
#    - POSTGRES_*: Configur√©es automatiquement via la base de donn√©es
#    - GOOGLE_OAUTH2_*: √Ä configurer manuellement
#    - CLAUDE_API_KEY: √Ä configurer manuellement
#    - FRONTEND_URL: √Ä configurer avec l'URL de votre frontend
# 
# 3. UPGRADE RECOMMAND√â:
#    - Pour la production, consid√©rer un plan payant
#    - Plus de RAM et CPU pour les op√©rations ML
#    - Pas de sleep automatique
#    - Meilleures performances
# 
# 4. S√âCURIT√â:
#    - HTTPS activ√© automatiquement
#    - Variables sensibles prot√©g√©es
#    - CORS configur√© pour le frontend
# 
# 5. MONITORING:
#    - Logs disponibles dans le dashboard Render
#    - M√©triques de performance
#    - Health checks automatiques
