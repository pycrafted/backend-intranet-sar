#!/usr/bin/env python
"""
Script pour vÃ©rifier l'Ã©tat de la base de donnÃ©es
VÃ©rifie les tables, leur structure et leur cohÃ©rence avec les modÃ¨les Django
"""
import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'master.settings')
django.setup()

from django.db import connection

def check_table_exists(table_name):
    """VÃ©rifie si une table existe"""
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_name = %s
            );
        """, [table_name])
        return cursor.fetchone()[0]

def get_table_structure(table_name):
    """RÃ©cupÃ¨re la structure d'une table"""
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = %s
            ORDER BY ordinal_position;
        """, [table_name])
        return cursor.fetchall()

def check_django_migrations():
    """VÃ©rifie l'Ã©tat des migrations Django"""
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT app, name, applied 
            FROM django_migrations 
            ORDER BY app, name;
        """)
        return cursor.fetchall()

def check_database_health():
    """VÃ©rifie la santÃ© gÃ©nÃ©rale de la base de donnÃ©es"""
    print("=" * 70)
    print("VÃ‰RIFICATION DE LA BASE DE DONNÃ‰ES")
    print("=" * 70)
    
    # 1. VÃ©rifier si la table django_migrations existe
    print("\n1. VÃ©rification des migrations Django...")
    django_migrations_exists = check_table_exists('django_migrations')
    if django_migrations_exists:
        print("   âœ“ Table django_migrations existe")
        migrations = check_django_migrations()
        print(f"   â†’ {len(migrations)} migrations enregistrÃ©es")
        if migrations:
            print("\n   Migrations appliquÃ©es:")
            for app, name, applied in migrations[:10]:  # Afficher les 10 premiÃ¨res
                status = "âœ“" if applied else "âœ—"
                print(f"   {status} {app}.{name}")
            if len(migrations) > 10:
                print(f"   ... et {len(migrations) - 10} autres")
    else:
        print("   âœ— Table django_migrations n'existe pas (base vide)")
    
    # 2. VÃ©rifier la table rag_documentembedding
    print("\n2. VÃ©rification de la table rag_documentembedding...")
    table_exists = check_table_exists('rag_documentembedding')
    if table_exists:
        print("   âœ“ Table rag_documentembedding existe")
        structure = get_table_structure('rag_documentembedding')
        print("\n   Structure de la table:")
        expected_cols = {
            'id': 'bigint',
            'content_type': 'character varying',
            'content_id': 'integer',
            'content_text': 'text',
            'embedding': 'jsonb',
            'metadata': 'jsonb',
            'created_at': 'timestamp',
            'updated_at': 'timestamp'
        }
        
        actual_cols = {row[0]: row[1] for row in structure}
        
        print("\n   Colonnes actuelles:")
        for col_name, data_type, is_nullable, default in structure:
            nullable = "NULL" if is_nullable == 'YES' else "NOT NULL"
            print(f"   - {col_name:20} {data_type:20} {nullable}")
        
        print("\n   VÃ©rification des colonnes attendues:")
        all_ok = True
        for col_name, expected_type in expected_cols.items():
            if col_name in actual_cols:
                actual_type = actual_cols[col_name]
                if expected_type in actual_type or actual_type in expected_type:
                    print(f"   âœ“ {col_name} - OK")
                else:
                    print(f"   âš  {col_name} - Type diffÃ©rent (attendu: {expected_type}, actuel: {actual_type})")
            else:
                print(f"   âœ— {col_name} - MANQUANTE")
                all_ok = False
        
        # VÃ©rifier les colonnes supplÃ©mentaires
        extra_cols = set(actual_cols.keys()) - set(expected_cols.keys())
        if extra_cols:
            print(f"\n   âš  Colonnes supplÃ©mentaires dÃ©tectÃ©es: {', '.join(extra_cols)}")
        
        # Compter les enregistrements
        with connection.cursor() as cursor:
            cursor.execute("SELECT COUNT(*) FROM rag_documentembedding")
            count = cursor.fetchone()[0]
            print(f"\n   â†’ {count} enregistrements dans la table")
            
            if count > 0:
                cursor.execute("""
                    SELECT COUNT(*) FROM rag_documentembedding 
                    WHERE content_text IS NULL OR content_text = ''
                """)
                null_content = cursor.fetchone()[0]
                if null_content > 0:
                    print(f"   âš  {null_content} enregistrements sans content_text")
        
        if not all_ok:
            print("\n   âš  PROBLÃˆME: Structure incomplÃ¨te ou incorrecte")
    else:
        print("   âœ— Table rag_documentembedding n'existe pas")
    
    # 3. VÃ©rifier rag_search_log
    print("\n3. VÃ©rification de la table rag_search_log...")
    log_exists = check_table_exists('rag_search_log')
    if log_exists:
        print("   âœ“ Table rag_search_log existe")
        with connection.cursor() as cursor:
            cursor.execute("SELECT COUNT(*) FROM rag_search_log")
            count = cursor.fetchone()[0]
            print(f"   â†’ {count} enregistrements")
    else:
        print("   âœ— Table rag_search_log n'existe pas")
    
    # 4. VÃ©rifier l'extension pgvector
    print("\n4. VÃ©rification de l'extension pgvector...")
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT EXISTS (
                SELECT 1 FROM pg_extension WHERE extname = 'vector'
            );
        """)
        pgvector_exists = cursor.fetchone()[0]
        if pgvector_exists:
            print("   âœ“ Extension pgvector installÃ©e")
        else:
            print("   âœ— Extension pgvector non installÃ©e")
    
    # RÃ©sumÃ©
    print("\n" + "=" * 70)
    print("RÃ‰SUMÃ‰")
    print("=" * 70)
    
    issues = []
    if not django_migrations_exists:
        issues.append("Base de donnÃ©es vide (pas de migrations Django)")
    if not table_exists:
        issues.append("Table rag_documentembedding manquante")
    elif table_exists:
        # VÃ©rifier si c'est l'ancienne structure (avec 'content' au lieu de 'content_text')
        structure = get_table_structure('rag_documentembedding')
        col_names = [row[0] for row in structure]
        if 'content' in col_names and 'content_text' not in col_names:
            issues.append("Table utilise l'ancien champ 'content' au lieu de 'content_text'")
        if 'content_text' not in col_names:
            issues.append("Champ 'content_text' manquant")
    
    if issues:
        print("\nâš  PROBLÃˆMES DÃ‰TECTÃ‰S:")
        for i, issue in enumerate(issues, 1):
            print(f"   {i}. {issue}")
        print("\nðŸ’¡ RECOMMANDATIONS:")
        if 'content' in str(issues):
            print("   - La table utilise l'ancienne structure")
            print("   - Options:")
            print("     1. Supprimer la table et relancer les migrations")
            print("     2. CrÃ©er une migration de renommage")
        if not django_migrations_exists:
            print("   - ExÃ©cutez: python manage.py migrate")
    else:
        print("\nâœ“ Aucun problÃ¨me dÃ©tectÃ© - Base de donnÃ©es OK")
    
    print("=" * 70)

if __name__ == '__main__':
    try:
        check_database_health()
    except Exception as e:
        print(f"\nâœ— Erreur lors de la vÃ©rification: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


